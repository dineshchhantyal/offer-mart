generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}



model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  sessions              Session[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  sellerProducts        Product[]              @relation("SellerProducts")

  @@map("users")

  createdAt DateTime @default(now())
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_tokens")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id              String        @id @default(cuid())
  title           String
  description     String
  brand           String
  category        Category      @relation(fields: [categoryId], references: [id])
  categoryId      String
  discountedPrice Float
  price           Float
  originalPrice   Float?
  quantity        Int           @default(1)
  unit            String        // e.g., pieces, kg, liters
  condition       ItemCondition @default(NEW)

  // Dates
  manufacturerDate DateTime?
  bestBefore      DateTime?
  expiryDate      DateTime

  // Location and Delivery
  pickupAddress        String
  isDeliveryAvailable  Boolean      @default(false)
  deliveryFee         Float?
  deliveryNotes       String?

  // Product Details
  allergenInfo    String?
  storageInfo     String?
  size            String?

  // Payment and Status
  isDonation      Boolean       @default(false)
  commission      Float         @default(0.1)
  status          ProductStatus @default(PENDING)
  paymentMethods  PaymentMethodType[]

  seller         User         @relation("SellerProducts", fields: [sellerId], references: [id])
  sellerId       String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  images         Image[]

  @@index([sellerId])
}

enum ItemCondition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
}

enum PaymentMethodType {
  CASH
  CARD
  BANK_TRANSFER
  MOBILE_PAYMENT
}


model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Image {
  id          String    @id @default(cuid())
  url         String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
}

enum ProductStatus {
  DRAFT
  PENDING
  VERIFIED
  REJECTED
}